/// grid.styl --- Semantic grid layout implementation
//
// Copyright (c) 2012 Quildreen Motta
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation files
// (the "Software"), to deal in the Software without restriction,
// including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software,
// and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//
// ----
// Semantic Grid is (c) Tyler Tate (http://twitter.com/tylertate), and
// is lisensed under an Apache licence.

/// Module grid ////////////////////////////////////////////////////////
//
// A port of the `Semantic Grid`_ system over to `Stylus`_, using the
// JumperSkirt namespacing conventions to make it more modular.
//
// The module provides you with three *constructor* mixins, that is,
// those that can be invoked inside a selector to provide useful
// presentation behaviours.
//
//
// Example usage
// -------------
//
// .. code-block:: html
//
//    <header> ... </header>
//    <article> ... </article>
//    <aside> ... </aside>
//
// .. code-block:: css
//
//    header
//      jsk-make-column(12)
//    article
//      jsk-make-column(9)
//    aside
//      jsk-make-column(3)
//
//
// .. _Semantic Grid: http://semantic.gs/
// .. _Stylus:        http://learnboost.github.com/stylus/


//// == Helpers ========================================================

///// Function jsk-grid--size
// :internal:
// jsk-grid--size :: Module -> Unit
jsk-grid--size(columns = jsk-grid-columns)
  width   = jsk-grid-module-width
  gutter  = jsk-grid-gutter

  (width + gutter) * columns


///// Function jsk-grid--fix-pixel-rounding
// :internal:
// jsk-grid--fix-pixel-rounding :: Unit -> Unit
jsk-grid--fix-pixel-rounding(pixels)
  min-width = jsk-grid-min-width

  pixels - (((0.5 / min-width) * 100) * 1%)


///// Function jsk-grid--row-gutter
// :internal:
// jsk-grid--row-gutter :: Module -> Unit
jsk-grid--row-gutter(columns)
  size   = jsk-grid--size(columns)
  gutter = jsk-grid-gutter
    
  (gutter + size) / size


///// Function jsk-grid--column-gutter
// :internal:
// jsk-grid--column-gutter :: Module, Module -> Unit
jsk-grid--column-gutter(n, columns = jsk-grid-columns)
  gutter = jsk-grid-gutter
  width  = jsk-grid-module-width
  size   = jsk-grid--size(columns)

  (((gutter + width) * n) - gutter) / size


///// Function jsk-grid--gutter-margin
// :internal:
// jsk-grid--gutter-margin :: Module -> Unit
jsk-grid--gutter-margin(columns = jsk-grid-columns)
  gutter = jsk-grid-gutter
  size   = jsk-grid--size(columns)
  
  (gutter * 0.5) / size


///// Function jsk-grid--dimensions
// :internal:
// jsk-grid--dimensions :: Unit, Unit -> IO Node
jsk-grid--dimensions(gutter, margin)
  fix-rounding = jsk-grid--fix-pixel-rounding

  width:   jsk-grid-width * gutter
  margin:  0 (jsk-grid-width * margin)
  *width:  fix-rounding(@width)
  *margin: 0 fix-rounding(last(@margin))


//// == Configuration ==================================================

///// Data jsk-grid-module-width
// The size of the basic unit in the grid (a module). Gutter and column
// sizes in the grid are derived from this unit.
jsk-grid-module-width  = 60px

///// Data jsk-grid-gutter
// The spacing between each column in a grid.
jsk-grid-gutter        = 20px

///// Data jsk-grid-columns
// The total number of columns in the grid.
jsk-grid-columns       = 12

///// Data jsk-grid-width
// The maximum size of the grid. If a percentage, the grid will be
// automatically fluid.
jsk-grid-width         = jsk-grid--size(jsk-grid-columns)

///// Data jsk-grid-min-width
// The minimum width of the grid
jsk-grid-min-width     = 960px


//// == Constructors ===================================================

///// Function jsk-grid-make-row
// Stylises the element as a row in the grid.
//
// jsk-grid-make-row :: Module -> IO Node
jsk-grid-make-row(columns = jsk-grid-columns)
  gutter        = jsk-grid--row-gutter(columns)
  gutter-margin = jsk-grid--gutter-margin(columns) * -1

  display: block
  jsk-grid--dimensions(gutter, gutter-margin)


///// Function jsk-grid-make-column
// Stylises the element as a column in the grid. The size defines the
// width of the column, in modules.
//
// jsk-grid-make-column :: Module, Module -> IO Node
jsk-grid-make-column(size, columns = jsk-grid-columns)
  gutter        = jsk-grid--column-gutter(size, columns)
  gutter-margin = jsk-grid--gutter-margin(columns)

  display:  inline
  float:    left
  overflow: hidden
  jsk-grid--dimensions(gutter, gutter-margin)


///// Function jsk-grid-make-offset
// Stylises the element as white-space in the grid.
//
// jsk-grid-make-offset :: Module, Module -> IO Node
jsk-grid-make-offset(offset, columns = jsk-grid-columns)
  gutter-margin = jsk-grid--gutter-margin(columns)
  margin-offset = jsk-grid-gutter + jsk-grid-module-width

  margin-left: jsk-grid-width * (margin-offset * offset + gutter-margin)